#!/usr/bin/env zsh
# shellcheck shell=bash

# Provides a chezmoi prompt for use in starship.
#
# Detects and displays the following:
# - D: If chezmoi repo is dirty
# - B: If chezmoi repo is on a branch other than dev or main
# - R: If chezmoi has been applied since zsh was loaded
#      (implying the need to re-load zsh)
# - A: If chezmoi source has not been applied, implying need to chezmoi apply
#      Caveat: doesn't account for changes made on target since last apply
#
# To use:
# (1) wrap calls to chezmoi apply with:
#       mh-chezmoi-prompt chezmoi_apply
# (2) from your starship.toml, call this with when=true:
#       mh-chezmoi-prompt starship_prompt
# (3) add the following to your .zshrc:
#       if [[ -z $(/usr/bin/env zsh -c 'echo -n') ]]; then
#         eval "$(mh-chezmoi-prompt shell_init)"
#       else
#         echo "mh-chezmoi-prompt not loaded, as non-interative shell prints unexpected output" >&2
#       fi
#
# See show_syntax function below for usage.

share_dir="${MH_SHARE_DIR:-$HOME/.local/share/mh}"
last_applied_path="$share_dir"/.chezmoi-last-applied
last_clean_applied_path="$share_dir"/.chezmoi-last-clean-applied
source_dir="$HOME/.local/share/chezmoi"

function show_syntax {
  echo "Syntax: $0 <command> [<args>]" >&2
  echo "Commands:" >&2
  echo " chezmoi_apply" >&2
  echo " starship_prompt" >&2
  echo " shell_init" >&2
}

# Echoes last modified time of the given file in epoch seconds, else "0".
function get_last_modified {
  local file="$1"
  if [[ ! -f "$file" ]]; then
    echo "0"
  elif [[ "$(uname -s)" == "Darwin" ]]; then
    stat -f "%m" "$file"
  elif [[ "$(uname -s)" == "Linux" ]]; then
    stat -c %Y "$file"
  else
    echo "Unsupported OS: $(uname -s)" >&2
    echo "0"
  fi
}

function seconds_to_human_readable {
  local seconds="$1"
  if [[ "$seconds" -lt 60 ]]; then
    human="${seconds}s"
  elif [[ "$seconds" -lt 3600 ]]; then
    human="$((seconds / 60))m"
  else
    human="$((seconds / 3600))h"
  fi
  echo -n "$human"
}

# Wraps a call to chezmoi apply with updates to the last
# applied time and last clean applied time.
function chezmoi_apply {
  rm -f "$last_clean_applied_path"
  if [[ ! -f "$last_applied_path" ]]; then
    mkdir -p "$(dirname "$last_applied_path")"
  fi
  touch "$last_applied_path"

  chezmoi apply "$@"
  result_code=$?

  if [[ "$result_code" -eq 0 ]]; then
    # Store the HEAD ref in file contents, and current time via file mod time
    git -C "$source_dir" rev-parse HEAD > "$last_clean_applied_path" || true
  fi
  return "$result_code"
}

function starship_prompt {
  local prompt=""

  # Show if chezmoi repo is dirty
  local git_changes
  git_changes="$(git -C "$source_dir" status --porcelain | wc -l | awk '{print $1}')"
  if [[ "$git_changes" -gt 0 ]]; then
    prompt="️${prompt}D(${git_changes})"
  fi

  # Show if chezmoi repo is on a branch other than dev or main
  symbolic_ref="$(awk '{print $2}' "${source_dir}/.git/HEAD")" # e.g. "refs/heads/dev"
  current_branch="${symbolic_ref##*/}" # e.g. "dev"
  if [[ "$current_branch" != "dev" && "$current_branch" != "main" ]]; then
    prompt="${prompt}B(${current_branch})"
  fi
  head_sha="$(cat "$source_dir/.git/refs/heads/$current_branch")"

  # Show a status indicator if chezmoi has been applied since zsh was loaded,
  # and a terse error if shell not initialised properly.
  local last_applied

  if [[ -z "$MH_CHEZMOI_LOADED_VERSION" ]]; then
      prompt="${prompt}[mh-chezmoi-prompt shell_init required]"
      return
  fi

  last_applied="$(get_last_modified "$last_applied_path")"

  if [[ "$last_applied" -gt "$MH_CHEZMOI_LOADED_VERSION" ]]; then
      seconds=$((last_applied - MH_CHEZMOI_LOADED_VERSION))
      human_readable="$(seconds_to_human_readable "$seconds")"
      prompt="${prompt}️R(${human_readable})"
  fi

  # Find out if we can skip chezmoi status check due to last apply being clean
  local skip_chezmoi_status=false
  if [[ -f "$last_clean_applied_path" ]]; then
    # The last apply was clean. If current HEAD matches the SHA stored
    # in the last clean apply file, *and* the git repo is currently clean,
    # then assume chezmoi source is synced to the target.
    # Caveat: this does not account for changes made on the target side.
    if [[ "$head_sha" == "$(cat "$last_clean_applied_path")" ]]; then
      if [[ "$git_changes" -eq 0 ]]; then
        skip_chezmoi_status=true
      fi
    fi
  fi

  # Show if chezmoi source and target are out of sync
  if [[ "$skip_chezmoi_status" == false ]]; then
    local chezmoi_changes
    chezmoi_changes="$(chezmoi status | wc -l | awk '{print $1}')"
    if [[ "$chezmoi_changes" -gt 0 ]]; then
      prompt="${prompt}️A(${chezmoi_changes})"
    fi
  fi

  if [[ -n "$prompt" ]]; then
    echo -n "[🏠${prompt}]"
  fi
}

# When evaluated, records the last chezmoi apply time in an environment variable.
function shell_init {
  local last_applied
  last_applied="$(get_last_modified "$last_applied_path")"
  echo "export MH_CHEZMOI_LOADED_VERSION=$last_applied"
}

command="$1"

case "$command" in
  chezmoi_apply)
    shift
    chezmoi_apply "$@"
    ;;
  starship_prompt)
    starship_prompt
    ;;
  shell_init)
    shell_init
    ;;
  *)
    echo "Unknown command: $command" >&2
    show_syntax
    exit 1
    ;;
esac
