{ config, pkgs, ... }:

{
  # Home Manager needs a bit of information about you and the paths it should
  # manage.
  home.username = "{{ .chezmoi.username }}";
  home.homeDirectory = "{{ .chezmoi.homeDir }}";

  # This value determines the Home Manager release that your configuration is
  # compatible with. This helps avoid breakage when a new Home Manager release
  # introduces backwards incompatible changes.
  #
  # You should not change this value, even if you update Home Manager. If you do
  # want to update the value, then make sure to first check the Home Manager
  # release notes.
  home.stateVersion = "23.11"; # Please read the comment before changing.

  # The home.packages option allows you to install Nix packages into your
  # environment.
  home.packages = [
    pkgs.atool
    pkgs.atuin
    pkgs.bat
    pkgs.bats  # 'bats-core' in Homebrew
    pkgs.bottom
    pkgs.broot
    pkgs.chezmoi
    pkgs.choose # 'choose-rust' in Homebrew
    pkgs.delta # 'git-delta' in Homebrew
    pkgs.du-dust # 'dust' in Homebrew
    pkgs.dua # 'dua-cli' in Homebrew
    pkgs.duf
    pkgs.eget
    pkgs.fd
    pkgs.fzf
    pkgs.gh
    pkgs.git-absorb
    pkgs.hledger
    pkgs.hyperfine
    pkgs.jq
    pkgs.just
    pkgs.lazydocker
    pkgs.lazygit
    pkgs.lsd
    pkgs.mdcat
    # TODO neovim
    pkgs.nushell
    # TODO pandoc
    pkgs.parallel
    pkgs.pueue
    # TODO ripgrep
    # TODO ruff
    # TODO sd
    pkgs.shellcheck
    pkgs.shfmt
    # pkgs.sshpass # If needed
    pkgs.starship
    # TODO stylua
    pkgs.tig
    # TODO tlrc
    pkgs.tmux
    pkgs.uv
    # TODO wget
    pkgs.yazi
    # TODO yt-dlp
    pkgs.zoxide

    # Notably absent:
    # - Docker (Linux dev targets are currently guest only)
    # - Emacs (currently used only for Org Mode on host Macs)


    # # It is sometimes useful to fine-tune packages, for example, by applying
    # # overrides. You can do that directly here, just don't forget the
    # # parentheses. Maybe you want to install Nerd Fonts with a limited number of
    # # fonts?
    # (pkgs.nerdfonts.override { fonts = [ "FantasqueSansMono" ]; })

    # # You can also create simple shell scripts directly inside your
    # # configuration. For example, this adds a command 'my-hello' to your
    # # environment:
    # (pkgs.writeShellScriptBin "my-hello" ''
    #   echo "Hello, ${config.home.username}!"
    # '')
  ];

  # Home Manager is pretty good at managing dotfiles. The primary way to manage
  # plain files is through 'home.file'.
  home.file = {
    # # Building this configuration will create a copy of 'dotfiles/screenrc' in
    # # the Nix store. Activating the configuration will then make '~/.screenrc' a
    # # symlink to the Nix store copy.
    # ".screenrc".source = dotfiles/screenrc;

    # # You can also set the file content immediately.
    # ".gradle/gradle.properties".text = ''
    #   org.gradle.console=verbose
    #   org.gradle.daemon.idletimeout=3600000
    # '';
  };

  # Home Manager can also manage your environment variables through
  # 'home.sessionVariables'. If you don't want to manage your shell through Home
  # Manager then you have to manually source 'hm-session-vars.sh' located at
  # either
  #
  #  ~/.nix-profile/etc/profile.d/hm-session-vars.sh
  #
  # or
  #
  #  ~/.local/state/nix/profiles/profile/etc/profile.d/hm-session-vars.sh
  #
  # or
  #
  #  /etc/profiles/per-user/matt/etc/profile.d/hm-session-vars.sh
  #
  home.sessionVariables = {
    # EDITOR = "emacs";
  };

  # Let Home Manager install and manage itself.
  programs.home-manager.enable = true;
}
