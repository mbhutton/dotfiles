#!/bin/bash

# Automates my current git rebasing workflow for this dotfiles repo.
# Note: it also pushes the main branch to origin if it has been advanced.
# Syntax: <this script> <no args>

function fail {
  echo >&2
  echo "$*" >&2
  exit 1
}

function fail_if_dirty {
  [[ -z "$(git status --porcelain)" ]] || fail "There are uncommitted changes"
}

function assert_git_repo {
  git rev-parse --is-inside-work-tree >/dev/null 2>&1 || fail "Not in a git repo"
}

function assert_ref_found {
  git rev-parse --verify "$ref" >/dev/null 2>&1 || fail "Git ref $ref not found"
}

function is_a_ancestor_of_b {
  git merge-base --is-ancestor "$1" "$2"
}

function assert_a_is_ancestor_of_b {
  is_a_ancestor_of_b "$@" || fail "Ref $1 not an ancestor of $2"
}

function are_refs_equal {
  [[ "$(git rev-parse "$1")" == "$(git rev-parse "$2")" ]]
}

function assert_refs_equal {
  are_refs_equal "$@" || fail "Ref $1 != $2"
}

function check_out_or_fail_check_dirty {
  echo "Checking out $1..."
  git checkout "$1" || fail "Failed to checkout $1"
  fail_if_dirty
}

function rebase_or_fail_check_dirty {
  echo "Doing git rebase $* ..."
  git rebase "$@" || fail "Failed: git rebase $*"
  fail_if_dirty
}

function update_base_tag_for_branch_or_fail {
  local tag="$1"
  local branch="$2"
  if are_refs_equal "$tag" "$branch"; then
    echo "Tag $tag already points to branch $branch"
  else
    echo "Updating tag $tag to point to branch $branch..."
    git tag -f "$tag" "$branch" || fail "Failed to tag $branch as $tag"
  fi
}

function main {
  assert_git_repo
  git remote get-url origin | grep 'mbhutton/dotfiles' >/dev/null \
  || fail "Not in the dotfiles repo which this script is currently for"
  fail_if_dirty

  for ref in origin/main main ok dev _dev4off off; do
    assert_ref_found "$ref"
  done

  # Assert origin/main => main => ok => dev; and _dev4off => off
  assert_a_is_ancestor_of_b origin/main main
  assert_a_is_ancestor_of_b main ok
  assert_a_is_ancestor_of_b ok dev

  if ! is_a_ancestor_of_b _dev4off off; then
    if is_a_ancestor_of_b dev off; then
      # This is the expected state following a merge conflict resolution
      update_base_tag_for_branch_or_fail _dev4off dev
    fi
  fi
  assert_a_is_ancestor_of_b _dev4off off

  check_out_or_fail_check_dirty main
  if is_a_ancestor_of_b ok main ; then
    echo "Main branch already contains ok tag"
  else
    echo "Advancing main branch to ok tag..."
    rebase_or_fail_check_dirty ok
  fi
  assert_refs_equal ok main

  assert_a_is_ancestor_of_b origin/main main  # Re-checking
  if ! are_refs_equal origin/main main; then
    echo "Pushing main branch to origin..."
    git push origin main || fail "Failed to push main branch"
  fi

  assert_a_is_ancestor_of_b main dev  # Re-checking
  assert_a_is_ancestor_of_b _dev4off off  # Re-checking

  check_out_or_fail_check_dirty off
  if is_a_ancestor_of_b dev off; then
    echo "Off branch already contains 'dev' branch"
  else
    echo "Rebasing 'off' branch onto 'dev' branch..."
    rebase_or_fail_check_dirty --onto dev _dev4off off
  fi
  assert_a_is_ancestor_of_b dev off
  update_base_tag_for_branch_or_fail _dev4off dev

  # Assert main => ok => dev=_dev4off => off
  assert_a_is_ancestor_of_b main ok
  assert_a_is_ancestor_of_b ok dev
  assert_refs_equal dev _dev4off
  assert_a_is_ancestor_of_b _dev4off off

  echo "Switching to dev branch as final step..."
  check_out_or_fail_check_dirty dev

  echo "OK: Done"
}

[[ $# -eq 0 ]] || fail "Usage: $0 (no args)"
main
